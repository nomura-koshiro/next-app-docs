// ================================================================================
// Imports
// ================================================================================

"use client";

import { useRouter } from "next/navigation";
import { useEffect } from "react";

import { LoadingSpinner } from "@/components/ui";
import { useAuth } from "@/features/auth/hooks/use-auth";

// ================================================================================
// 型定義
// ================================================================================

type ProtectedLayoutProps = {
  /** レンダリングする子要素 */
  children: React.ReactNode;
};

// ================================================================================
// コンポーネント
// ================================================================================

/**
 * 保護されたルート用のレイアウトコンポーネント（Client Component）
 *
 * 認証が必要なページを保護します。
 * 未認証のユーザーは自動的にログインページにリダイレクトされます。
 *
 * @param props - レイアウトのプロパティ
 * @param props.children - レンダリングするページコンテンツ
 * @returns 保護されたレイアウト要素
 */
const ProtectedLayout = ({ children }: ProtectedLayoutProps) => {
  // ================================================================================
  // Hooks
  // ================================================================================
  const { isAuthenticated, isLoading } = useAuth();
  const router = useRouter();

  // ================================================================================
  // Effects
  // ================================================================================
  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      // router.pushではなくrouter.replaceを使用して履歴に残さない
      router.replace("/login");
    }
  }, [isAuthenticated, isLoading, router]);

  // ================================================================================
  // Render
  // ================================================================================
  // ローディング中または未認証時は常にローディング表示（チラつき防止）
  if (isLoading || !isAuthenticated) {
    return <LoadingSpinner message="認証情報を確認しています..." />;
  }

  // 認証済みの場合は子要素を表示
  return <>{children}</>;
};

export default ProtectedLayout;
