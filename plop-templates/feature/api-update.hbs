import { useMutation, useQueryClient } from "@tanstack/react-query";

import { api } from "@/lib/api-client";
import { MutationConfig } from "@/lib/tanstack-query";
import type { Update{{pascalCase featureName}}Input } from "../types";

// ================================================================================
// API Functions
// ================================================================================

/**
 * {{pascalCase featureName}}を更新
 *
 * TODO: APIエンドポイントを実際のパスに修正してください
 */
export const update{{pascalCase featureName}} = ({
  id,
  data,
}: {
  id: string;
  data: Update{{pascalCase featureName}}Input;
}): Promise<{ data: { id: string } }> => {
  return api.put(`/api/v1/{{kebabCase featureName}}s/${id}`, data);
};

// ================================================================================
// Hooks
// ================================================================================

type UseUpdate{{pascalCase featureName}}Options = {
  mutationConfig?: MutationConfig<typeof update{{pascalCase featureName}}>;
};

/**
 * {{pascalCase featureName}}を更新するフック
 */
export const useUpdate{{pascalCase featureName}} = ({ mutationConfig }: UseUpdate{{pascalCase featureName}}Options = {}) => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: update{{pascalCase featureName}},
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: ["{{kebabCase featureName}}s"] });
      queryClient.invalidateQueries({ queryKey: ["{{kebabCase featureName}}s", variables.id] });
    },
    ...mutationConfig,
  });
};
