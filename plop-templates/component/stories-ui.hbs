import type { Meta, StoryObj } from "@storybook/nextjs-vite";
import { fn } from "@storybook/test";
import { {{pascalCase componentName}} } from "./{{kebabCase componentName}}";

/**
 * {{pascalCase componentName}}のストーリー
 *
 * TODO: コンポーネントの説明を記載してください
 *
 * @example
 * ```tsx
 * <{{pascalCase componentName}}>
 *   コンテンツ
 * </{{pascalCase componentName}}>
 * ```
 */
const meta = {
  // ================================================================================
  // Storybookのナビゲーション階層
  // ================================================================================
  title: "components/{{componentType}}/{{pascalCase componentName}}",

  // ================================================================================
  // 表示するコンポーネント
  // ================================================================================
  component: {{pascalCase componentName}},

  parameters: {
    // ================================================================================
    // レイアウト設定
    // - "centered": コンポーネントを画面中央に配置（小さなUIコンポーネント向け）
    // - "padded": 周囲にパディングを追加（フォームやカード向け）
    // - "fullscreen": 全画面表示（ページレイアウト向け）
    // ================================================================================
    layout: "centered",

    // ================================================================================
    // コンポーネントの詳細説明
    // Markdown形式で記述可能
    // ================================================================================
    docs: {
      description: {
        component:
          "TODO: コンポーネントの詳細な説明をここに記載\n\n" +
          "**主な機能:**\n" +
          "- 機能1の説明\n" +
          "- 機能2の説明\n\n" +
          "**使用例:**\n" +
          "```tsx\n" +
          "<{{pascalCase componentName}}>\n" +
          "  コンテンツ\n" +
          "</{{pascalCase componentName}}>\n" +
          "```",
      },
    },

    // ================================================================================
    // 背景色のテストオプション
    // 異なる背景色でコンポーネントの見た目を確認できます
    // ================================================================================
    backgrounds: {
      default: "light",
      values: [
        { name: "light", value: "#ffffff" },
        { name: "dark", value: "#1a1a1a" },
        { name: "gray", value: "#f3f4f6" },
      ],
    },

    // ================================================================================
    // アクション設定
    // on* で始まるプロパティを自動的にアクションパネルに表示
    // ================================================================================
    actions: {
      argTypesRegex: "^on[A-Z].*",
    },
  },

  // ================================================================================
  // ドキュメント自動生成を有効化
  // ================================================================================
  tags: ["autodocs"],

  // ================================================================================
  // コントロールパネルの設定
  // Storybookのコントロールパネルで操作可能なプロパティを定義
  // ================================================================================
  argTypes: {
    children: {
      control: "text",
      description: "コンポーネントの子要素（テキストまたはReactNode）",
      table: {
        type: { summary: "ReactNode" },
        category: "コンテンツ",
      },
    },
    className: {
      control: "text",
      description: "追加のCSSクラス名",
      table: {
        type: { summary: "string" },
        category: "スタイリング",
      },
    },
    // TODO: 追加のプロパティを定義してください
    // 例:
    // variant: {
    //   control: "select",
    //   options: ["default", "primary", "secondary"],
    //   description: "コンポーネントのバリエーション",
    //   table: {
    //     type: { summary: "string" },
    //     defaultValue: { summary: "default" },
    //     category: "外観",
    //   },
    // },
  },

  // ================================================================================
  // デフォルトの args 値
  // すべてのストーリーに適用されるデフォルト値
  // 個々のストーリーで上書き可能
  // ================================================================================
  args: {
    children: "{{pascalCase componentName}}のサンプルコンテンツ",
  },
} satisfies Meta<typeof {{pascalCase componentName}}>;

export default meta;
type Story = StoryObj<typeof meta>;

// ================================================================================
// ストーリー定義
// ================================================================================

/**
 * デフォルト状態
 *
 * 最も一般的な使用例を示します
 */
export const Default: Story = {
  name: "デフォルト",
  args: {
    children: "{{pascalCase componentName}}",
  },
  parameters: {
    docs: {
      description: {
        story: "デフォルト状態の{{pascalCase componentName}}コンポーネント",
      },
    },
  },
};

/**
 * カスタムスタイル
 *
 * 追加のクラス名を適用した例
 */
export const CustomStyle: Story = {
  name: "カスタムスタイル",
  args: {
    children: "カスタムスタイル",
    className: "bg-blue-100 p-4 rounded-md",
  },
  parameters: {
    docs: {
      description: {
        story: "classNameプロパティでカスタムスタイルを適用できます",
      },
    },
  },
};

/**
 * ダークモード表示
 *
 * 背景色を変更してダークモードでの見た目を確認
 */
export const DarkMode: Story = {
  name: "ダークモード",
  args: {
    children: "ダークモード",
  },
  parameters: {
    backgrounds: {
      default: "dark",
    },
    docs: {
      description: {
        story: "ダークモードでの表示例",
      },
    },
  },
};

// TODO: 必要に応じて追加のストーリーを定義してください
// 例:
// - バリエーションごとのストーリー
// - 無効化状態
// - エラー状態
// - インタラクションテスト
