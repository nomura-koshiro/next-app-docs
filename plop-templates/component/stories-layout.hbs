import type { Meta, StoryObj } from "@storybook/nextjs-vite";
import { {{pascalCase componentName}} } from "./{{kebabCase componentName}}";

/**
 * {{pascalCase componentName}}のストーリー
 *
 * TODO: レイアウトの説明を記載してください
 *
 * @example
 * ```tsx
 * <{{pascalCase componentName}}>
 *   <YourContent />
 * </{{pascalCase componentName}}>
 * ```
 */
const meta = {
  // ================================================================================
  // Storybookのナビゲーション階層
  // ================================================================================
  title: "components/{{componentType}}/{{pascalCase componentName}}",

  // ================================================================================
  // 表示するコンポーネント
  // ================================================================================
  component: {{pascalCase componentName}},

  parameters: {
    // ================================================================================
    // レイアウト設定
    // レイアウトコンポーネントは "fullscreen" が適切
    // ================================================================================
    layout: "fullscreen",

    // ================================================================================
    // コンポーネントの詳細説明
    // ================================================================================
    docs: {
      description: {
        component:
          "TODO: レイアウトの詳細な説明をここに記載\n\n" +
          "**主な機能:**\n" +
          "- ページ全体のレイアウト構造を提供\n" +
          "- コンテンツの配置と余白を管理\n" +
          "- レスポンシブデザイン対応\n\n" +
          "**使用例:**\n" +
          "```tsx\n" +
          "<{{pascalCase componentName}}>\n" +
          "  <PageContent />\n" +
          "</{{pascalCase componentName}}>\n" +
          "```",
      },
    },

    // ================================================================================
    // 背景色設定
    // レイアウトは通常 gray 背景
    // ================================================================================
    backgrounds: {
      default: "gray",
      values: [
        { name: "light", value: "#ffffff" },
        { name: "gray", value: "#f3f4f6" },
        { name: "dark", value: "#1a1a1a" },
      ],
    },

    // ================================================================================
    // レスポンシブテスト用のビューポート設定
    // レイアウトコンポーネントは必須
    // ================================================================================
    viewport: {
      viewports: {
        mobile: {
          name: "Mobile",
          styles: { width: "375px", height: "667px" },
        },
        tablet: {
          name: "Tablet",
          styles: { width: "768px", height: "1024px" },
        },
        desktop: {
          name: "Desktop",
          styles: { width: "1280px", height: "800px" },
        },
      },
      defaultViewport: "desktop",
    },
  },

  // ================================================================================
  // ドキュメント自動生成を有効化
  // ================================================================================
  tags: ["autodocs"],

  // ================================================================================
  // コントロールパネルの設定
  // ================================================================================
  argTypes: {
    children: {
      control: false,
      description: "レイアウト内に配置するコンテンツ",
      table: {
        type: { summary: "ReactNode" },
        category: "コンテンツ",
      },
    },
    className: {
      control: "text",
      description: "追加のCSSクラス名",
      table: {
        type: { summary: "string" },
        category: "スタイリング",
      },
    },
    // TODO: 必要に応じて追加のプロパティを定義してください
    // 例:
    // maxWidth: {
    //   control: "select",
    //   options: ["sm", "md", "lg", "xl", "full"],
    //   description: "コンテンツの最大幅",
    //   table: {
    //     type: { summary: "string" },
    //     defaultValue: { summary: "xl" },
    //     category: "レイアウト",
    //   },
    // },
  },

  // ================================================================================
  // デフォルトの args 値
  // ================================================================================
  args: {},
} satisfies Meta<typeof {{pascalCase componentName}}>;

export default meta;
type Story = StoryObj<typeof meta>;

// ================================================================================
// ストーリー定義
// ================================================================================

/**
 * デフォルトのレイアウト
 *
 * 最も基本的なレイアウト
 */
export const Default: Story = {
  name: "デフォルト",
  render: (args) => (
    <{{pascalCase componentName}} {...args}>
      <div className="rounded-lg border bg-white p-8">
        <h2 className="text-2xl font-bold">ページコンテンツ</h2>
        <p className="mt-4 text-gray-600">
          ここにページのコンテンツが入ります
        </p>
      </div>
    </{{pascalCase componentName}}>
  ),
  parameters: {
    docs: {
      description: {
        story: "デフォルトのレイアウト。シンプルなコンテンツ表示に適しています。",
      },
    },
  },
};

/**
 * ヘッダー付きレイアウト
 *
 * ページヘッダーを含むレイアウト
 */
export const WithHeader: Story = {
  name: "ヘッダー付き",
  render: (args) => (
    <{{pascalCase componentName}} {...args}>
      <div className="space-y-6">
        <div className="border-b pb-4">
          <h1 className="text-3xl font-bold">ページタイトル</h1>
          <p className="mt-2 text-gray-600">ページの説明文</p>
        </div>
        <div className="rounded-lg border bg-white p-8">
          <p>メインコンテンツ</p>
        </div>
      </div>
    </{{pascalCase componentName}}>
  ),
  parameters: {
    docs: {
      description: {
        story: "ページヘッダーを含むレイアウト例",
      },
    },
  },
};

/**
 * 複数セクション
 *
 * 複数の異なるセクションを縦に配置したレイアウト
 */
export const MultipleSections: Story = {
  name: "複数セクション",
  render: (args) => (
    <{{pascalCase componentName}} {...args}>
      <div className="space-y-8">
        <section>
          <h2 className="text-2xl font-bold">セクション 1</h2>
          <div className="mt-4 rounded-lg border bg-white p-6">
            <p className="text-gray-600">セクション1のコンテンツ</p>
          </div>
        </section>
        <section>
          <h2 className="text-2xl font-bold">セクション 2</h2>
          <div className="mt-4 rounded-lg border bg-white p-6">
            <p className="text-gray-600">セクション2のコンテンツ</p>
          </div>
        </section>
      </div>
    </{{pascalCase componentName}}>
  ),
  parameters: {
    docs: {
      description: {
        story: "複数セクションを含むレイアウト例",
      },
    },
  },
};

/**
 * モバイル表示
 *
 * モバイルデバイスでの表示
 */
export const MobileView: Story = {
  name: "モバイル表示",
  render: (args) => (
    <{{pascalCase componentName}} {...args}>
      <div className="space-y-4">
        <div className="border-b pb-4">
          <h1 className="text-2xl font-bold">ページタイトル</h1>
        </div>
        <div className="rounded-lg border bg-white p-4">
          <p className="text-sm">モバイル用のコンテンツ</p>
        </div>
      </div>
    </{{pascalCase componentName}}>
  ),
  parameters: {
    viewport: {
      defaultViewport: "mobile",
    },
    docs: {
      description: {
        story: "モバイルデバイスでの表示例",
      },
    },
  },
};

/**
 * タブレット表示
 *
 * タブレットデバイスでの表示
 */
export const TabletView: Story = {
  name: "タブレット表示",
  render: (args) => (
    <{{pascalCase componentName}} {...args}>
      <div className="space-y-6">
        <div className="border-b pb-4">
          <h1 className="text-3xl font-bold">ページタイトル</h1>
        </div>
        <div className="rounded-lg border bg-white p-6">
          <p>タブレット用のコンテンツ</p>
        </div>
      </div>
    </{{pascalCase componentName}}>
  ),
  parameters: {
    viewport: {
      defaultViewport: "tablet",
    },
    docs: {
      description: {
        story: "タブレットデバイスでの表示例",
      },
    },
  },
};

// TODO: 必要に応じて追加のストーリーを定義してください
// 例:
// - グリッドレイアウト
// - サイドバー付きレイアウト
// - 2カラムレイアウト
